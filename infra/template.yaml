AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Publish receipt data.
Parameters:
  Name:
    Description: The name of the project.
    Type: String
    Default: publish-data-receipt
  Authorizer:
    Description: The ARN of the Lambda function for JWT Request authorization.
    Type: String
    Default: arn:aws:lambda:us-east-2:920781344533:function:core-aws-authorizer
Resources:
  
  PublishRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
                - states.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'
  
  PublishPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: PublishPolicy
      Roles:
        - !Ref PublishRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: !GetAtt StateMachine.Arn
          - Effect: Allow
            Action:
              - xray:PutTraceSegments
              - xray:PutTelemetryRecords
              - xray:GetSamplingRules
              - xray:GetSamplingTargets
            Resource: '*'
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:GetLogEvents
              - logs:PutLogEvents
            Resource: '*'
          - Effect: Allow
            Action:
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
            Resource: '*'
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
            Resource: !Sub ${Bucket.Arn}/*
          - Effect: Allow
            Action:
              - textract:AnalyzeExpense
            Resource: '*'

  PublishApiAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt PublishRole.Arn

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub mytiki-${AWS::Region}-${Name}
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
  
  StateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Ref Name
      Role: !GetAtt PublishRole.Arn
      Type: STANDARD
      DefinitionSubstitutions:
        result_bucket: !Ref Bucket
      Tracing:
        Enabled: true
      Events:
        S3Event:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
                - aws.s3
              detail-type:
                - Object Created
              detail:
                bucket:
                  name:
                    - !Ref Bucket
                object:
                  key:
                    - wildcard: upload/*
      DefinitionUri: ../out/state_machine.json
  
  PublishApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Ref Name
      StageName: latest
      TracingEnabled: true
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: "/*"
          HttpMethod: "*"
          DataTraceEnabled: true
          MetricsEnabled: true
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ../openapi.yaml
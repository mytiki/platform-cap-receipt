AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Publish receipt data.
Parameters:
  Name:
    Description: The name of the project.
    Type: String
    Default: publish-data-receipt
  Authorizer:
    Description: The ARN of the Lambda function for JWT Request authorization.
    Type: String
  BucketName:
    Description: The name of the bucket to be used to store the receipts uploads and results.
    Type: String
    Default: publish-bucket

Resources:
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub mytiki-${AWS::Region}-${BucketName}
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  StateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Ref Name
      Role: !GetAtt StateMachineRole.Arn
      Type: STANDARD
      DefinitionSubstitutions:
        result_bucket: !Ref Bucket
      Tracing:
        Enabled: true
      Events:
        S3Event:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
                - aws.s3
              detail-type:
                - Object Created
              detail:
                bucket:
                  name:
                    - !Ref Bucket
                object:
                  key:
                    - wildcard: upload/*
      DefinitionUri: ../out/state_machine.json

  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: XRay
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                Resource: "*"
        - PolicyName: Logs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:GetLogEvents
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: "*"
        - PolicyName: S3
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource: !Sub ${Bucket.Arn}/*
        - PolicyName: Textract
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - textract:AnalyzeExpense
                Resource: "*"

  GetFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: rust-cargolambda
    Properties:
      FunctionName: !Sub ${Name}-get
      Description: Retrieves the extracted receipt data.
      CodeUri: ../src/api/lambda
      Handler: bootstrap
      Runtime: provided.al2
      MemorySize: 1024
      Timeout: 900
      Environment:
        Variables:
          TIKI_BUCKET: !Ref Bucket
      Tracing: Active
      Architectures:
        - x86_64
      AutoPublishAlias: latest
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - xray:PutTraceSegments
                - xray:PutTelemetryRecords
              Resource: "*"

  ConfigGetFunctionPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
      - GetFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub ${Name}-get
      Principal: apigateway.amazonaws.com

  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Ref Name
      StageName: latest
      TracingEnabled: true
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: "/*"
          HttpMethod: "*"
          DataTraceEnabled: true
          MetricsEnabled: true
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ../openapi.yaml

  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
      Policies:
        - PolicyName: S3
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub ${Bucket.Arn}/*
        - PolicyName: GetFunction
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !Sub ${GetFunction.Arn}
